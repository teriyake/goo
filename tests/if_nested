Input: (if (< 2 3) (if (>2 1) (print '2 is greater than 1')))
AST: []interface {}{parser.IfStatement{Condition:[]interface {}{parser.Operator{Value:"<"}, parser.Number{Value:2}, parser.Number{Value:3}}, ThenBlock:parser.IfStatement{Condition:[]interface {}{parser.Operator{Value:">"}, parser.Number{Value:2}, parser.Number{Value:1}}, ThenBlock:[]interface {}{parser.Identifier{Value:"print"}, parser.String{Value:"'2 is greater than 1'"}}, ElseBlock:interface {}(nil)}, ElseBlock:interface {}(nil)}}
Raw Bytecode: [31 0 0 0 0 0 0 0 64 31 0 0 0 0 0 0 8 64 3 6 31 0 0 0 0 0 0 0 64 31 0 0 0 0 0 0 240 63 2 6 33 19 0 0 0 50 32 105 115 32 103 114 101 97 116 101 114 32 116 104 97 110 32 49 9 8 8]
Generated Bytecode Instructions: [{31 [[0 0 0 0 0 0 0 64]]} {31 [[0 0 0 0 0 0 8 64]]} {3 []} {6 []} {31 [[0 0 0 0 0 0 0 64]]} {31 [[0 0 0 0 0 0 240 63]]} {2 []} {6 []} {33 [[50 32 105 115 32 103 114 101 97 116 101 114 32 116 104 97 110 32 49]]} {9 []} {8 []} {8 []}]
Initial VM State:
&{stack:[] pc:0 code:[{Opcode:31 Operands:[[0 0 0 0 0 0 0 64]]} {Opcode:31 Operands:[[0 0 0 0 0 0 8 64]]} {Opcode:3 Operands:[]} {Opcode:6 Operands:[]} {Opcode:31 Operands:[[0 0 0 0 0 0 0 64]]} {Opcode:31 Operands:[[0 0 0 0 0 0 240 63]]} {Opcode:2 Operands:[]} {Opcode:6 Operands:[]} {Opcode:33 Operands:[[50 32 105 115 32 103 114 101 97 116 101 114 32 116 104 97 110 32 49]]} {Opcode:9 Operands:[]} {Opcode:8 Operands:[]} {Opcode:8 Operands:[]}] symbolTable:map[]}
Executing Instruction: Opcode 31, Operands [[0 0 0 0 0 0 0 64]]
Stack after PUSH_NUMBER: [2]
Executing Instruction: Opcode 31, Operands [[0 0 0 0 0 0 8 64]]
Stack after PUSH_NUMBER: [2 3]
Executing Instruction: Opcode 3, Operands []
Stack after LESS: [true]
Executing Instruction: Opcode 6, Operands []
Executing Instruction: Opcode 31, Operands [[0 0 0 0 0 0 0 64]]
Stack after PUSH_NUMBER: [2]
Executing Instruction: Opcode 31, Operands [[0 0 0 0 0 0 240 63]]
Stack after PUSH_NUMBER: [2 1]
Executing Instruction: Opcode 2, Operands []
Stack after GRT: [true]
Executing Instruction: Opcode 6, Operands []
Executing Instruction: Opcode 33, Operands [[50 32 105 115 32 103 114 101 97 116 101 114 32 116 104 97 110 32 49]]
Stack after PUSH_STRING: [2 is greater than 1]
Executing Instruction: Opcode 9, Operands []
2 is greater than 1
Executing Instruction: Opcode 8, Operands []
Executing Instruction: Opcode 8, Operands []
Final VM State:
&{stack:[] pc:12 code:[{Opcode:31 Operands:[[0 0 0 0 0 0 0 64]]} {Opcode:31 Operands:[[0 0 0 0 0 0 8 64]]} {Opcode:3 Operands:[]} {Opcode:6 Operands:[]} {Opcode:31 Operands:[[0 0 0 0 0 0 0 64]]} {Opcode:31 Operands:[[0 0 0 0 0 0 240 63]]} {Opcode:2 Operands:[]} {Opcode:6 Operands:[]} {Opcode:33 Operands:[[50 32 105 115 32 103 114 101 97 116 101 114 32 116 104 97 110 32 49]]} {Opcode:9 Operands:[]} {Opcode:8 Operands:[]} {Opcode:8 Operands:[]}] symbolTable:map[]}
