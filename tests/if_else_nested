Input: (let x -2) (if (< x 3) (if (> x 1) (print 'x is greater than 1 and less than 3')) else (if (= x -2) (print 'x equals -2') else (print 'x is greater than 3')))
AST: []interface {}{[]interface {}{parser.Identifier{Value:"let"}, parser.Identifier{Value:"x"}, parser.Number{Value:-2}}, parser.IfStatement{Condition:[]interface {}{parser.Operator{Value:"<"}, parser.Identifier{Value:"x"}, parser.Number{Value:3}}, ThenBlock:parser.IfStatement{Condition:[]interface {}{parser.Operator{Value:">"}, parser.Identifier{Value:"x"}, parser.Number{Value:1}}, ThenBlock:[]interface {}{parser.Identifier{Value:"print"}, parser.String{Value:"'x is greater than 1 and less than 3'"}}, ElseBlock:interface {}(nil)}, ElseBlock:[]interface {}{parser.IfStatement{Condition:[]interface {}{parser.Operator{Value:"="}, parser.Identifier{Value:"x"}, parser.Number{Value:-2}}, ThenBlock:[]interface {}{parser.Identifier{Value:"print"}, parser.String{Value:"'x equals -2'"}}, ElseBlock:[]interface {}{parser.Identifier{Value:"print"}, parser.String{Value:"'x is greater than 3'"}}}}}}
Raw Bytecode: [31 0 0 0 0 0 0 0 192 44 1 0 0 0 120 30 1 0 0 0 120 31 0 0 0 0 0 0 8 64 3 6 30 1 0 0 0 120 31 0 0 0 0 0 0 240 63 2 6 33 35 0 0 0 120 32 105 115 32 103 114 101 97 116 101 114 32 116 104 97 110 32 49 32 97 110 100 32 108 101 115 115 32 116 104 97 110 32 51 9 8 7 30 1 0 0 0 120 31 0 0 0 0 0 0 0 192 4 6 33 11 0 0 0 120 32 101 113 117 97 108 115 32 45 50 9 7 33 19 0 0 0 120 32 105 115 32 103 114 101 97 116 101 114 32 116 104 97 110 32 51 9 8 8]
Generated Bytecode Instructions: [{31 [[0 0 0 0 0 0 0 192]]} {44 [[120]]} {30 [[120]]} {31 [[0 0 0 0 0 0 8 64]]} {3 []} {6 []} {30 [[120]]} {31 [[0 0 0 0 0 0 240 63]]} {2 []} {6 []} {33 [[120 32 105 115 32 103 114 101 97 116 101 114 32 116 104 97 110 32 49 32 97 110 100 32 108 101 115 115 32 116 104 97 110 32 51]]} {9 []} {8 []} {7 []} {30 [[120]]} {31 [[0 0 0 0 0 0 0 192]]} {4 []} {6 []} {33 [[120 32 101 113 117 97 108 115 32 45 50]]} {9 []} {7 []} {33 [[120 32 105 115 32 103 114 101 97 116 101 114 32 116 104 97 110 32 51]]} {9 []} {8 []} {8 []}]
Initial VM State:
&{stack:[] pc:0 code:[{Opcode:31 Operands:[[0 0 0 0 0 0 0 192]]} {Opcode:44 Operands:[[120]]} {Opcode:30 Operands:[[120]]} {Opcode:31 Operands:[[0 0 0 0 0 0 8 64]]} {Opcode:3 Operands:[]} {Opcode:6 Operands:[]} {Opcode:30 Operands:[[120]]} {Opcode:31 Operands:[[0 0 0 0 0 0 240 63]]} {Opcode:2 Operands:[]} {Opcode:6 Operands:[]} {Opcode:33 Operands:[[120 32 105 115 32 103 114 101 97 116 101 114 32 116 104 97 110 32 49 32 97 110 100 32 108 101 115 115 32 116 104 97 110 32 51]]} {Opcode:9 Operands:[]} {Opcode:8 Operands:[]} {Opcode:7 Operands:[]} {Opcode:30 Operands:[[120]]} {Opcode:31 Operands:[[0 0 0 0 0 0 0 192]]} {Opcode:4 Operands:[]} {Opcode:6 Operands:[]} {Opcode:33 Operands:[[120 32 101 113 117 97 108 115 32 45 50]]} {Opcode:9 Operands:[]} {Opcode:7 Operands:[]} {Opcode:33 Operands:[[120 32 105 115 32 103 114 101 97 116 101 114 32 116 104 97 110 32 51]]} {Opcode:9 Operands:[]} {Opcode:8 Operands:[]} {Opcode:8 Operands:[]}] symbolTable:map[]}
Executing Instruction: Opcode 31, Operands [[0 0 0 0 0 0 0 192]]
Stack after PUSH_NUMBER: [-2]
Executing Instruction: Opcode 44, Operands [[120]]
Variable x defined with value: -2
Executing Instruction: Opcode 30, Operands [[120]]
Stack after PUSH_VARIABLE (x): [-2]
Executing Instruction: Opcode 31, Operands [[0 0 0 0 0 0 8 64]]
Stack after PUSH_NUMBER: [-2 3]
Executing Instruction: Opcode 3, Operands []
Stack after LESS: [true]
Executing Instruction: Opcode 6, Operands []
Executing Instruction: Opcode 30, Operands [[120]]
Stack after PUSH_VARIABLE (x): [-2]
Executing Instruction: Opcode 31, Operands [[0 0 0 0 0 0 240 63]]
Stack after PUSH_NUMBER: [-2 1]
Executing Instruction: Opcode 2, Operands []
Stack after GRT: [false]
Executing Instruction: Opcode 6, Operands []
Executing Instruction: Opcode 30, Operands [[120]]
Stack after PUSH_VARIABLE (x): [-2]
Executing Instruction: Opcode 31, Operands [[0 0 0 0 0 0 0 192]]
Stack after PUSH_NUMBER: [-2 -2]
Executing Instruction: Opcode 4, Operands []
Stack after EQ: [true]
Executing Instruction: Opcode 6, Operands []
Executing Instruction: Opcode 33, Operands [[120 32 101 113 117 97 108 115 32 45 50]]
Stack after PUSH_STRING: [x equals -2]
Executing Instruction: Opcode 9, Operands []
x equals -2
Executing Instruction: Opcode 7, Operands []
Executing Instruction: Opcode 8, Operands []
Final VM State:
&{stack:[] pc:25 code:[{Opcode:31 Operands:[[0 0 0 0 0 0 0 192]]} {Opcode:44 Operands:[[120]]} {Opcode:30 Operands:[[120]]} {Opcode:31 Operands:[[0 0 0 0 0 0 8 64]]} {Opcode:3 Operands:[]} {Opcode:6 Operands:[]} {Opcode:30 Operands:[[120]]} {Opcode:31 Operands:[[0 0 0 0 0 0 240 63]]} {Opcode:2 Operands:[]} {Opcode:6 Operands:[]} {Opcode:33 Operands:[[120 32 105 115 32 103 114 101 97 116 101 114 32 116 104 97 110 32 49 32 97 110 100 32 108 101 115 115 32 116 104 97 110 32 51]]} {Opcode:9 Operands:[]} {Opcode:8 Operands:[]} {Opcode:7 Operands:[]} {Opcode:30 Operands:[[120]]} {Opcode:31 Operands:[[0 0 0 0 0 0 0 192]]} {Opcode:4 Operands:[]} {Opcode:6 Operands:[]} {Opcode:33 Operands:[[120 32 101 113 117 97 108 115 32 45 50]]} {Opcode:9 Operands:[]} {Opcode:7 Operands:[]} {Opcode:33 Operands:[[120 32 105 115 32 103 114 101 97 116 101 114 32 116 104 97 110 32 51]]} {Opcode:9 Operands:[]} {Opcode:8 Operands:[]} {Opcode:8 Operands:[]}] symbolTable:map[x:-2]}
