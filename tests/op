Input: (let x 'hi') (if (? x 'hi') (print 'hiiiii') else (print 'world'))
AST: []interface {}{[]interface {}{parser.Identifier{Value:"let"}, parser.Identifier{Value:"x"}, parser.String{Value:"'hi'"}}, parser.IfStatement{Condition:[]interface {}{parser.Operator{Value:"?"}, parser.Identifier{Value:"x"}, parser.String{Value:"'hi'"}}, ThenBlock:[]interface {}{parser.Identifier{Value:"print"}, parser.String{Value:"'hiiiii'"}}, ElseBlock:[]interface {}{parser.Identifier{Value:"print"}, parser.String{Value:"'world'"}}}}
Raw Bytecode: [33 2 0 0 0 104 105 44 1 0 0 0 120 30 1 0 0 0 120 33 2 0 0 0 104 105 5 6 33 6 0 0 0 104 105 105 105 105 105 9 7 33 5 0 0 0 119 111 114 108 100 9 8]
Generated Bytecode Instructions: [{33 [[104 105]]} {44 [[120]]} {30 [[120]]} {33 [[104 105]]} {5 []} {6 []} {33 [[104 105 105 105 105 105]]} {9 []} {7 []} {33 [[119 111 114 108 100]]} {9 []} {8 []}]
Initial VM State:
&{stack:[] pc:0 code:[{Opcode:33 Operands:[[104 105]]} {Opcode:44 Operands:[[120]]} {Opcode:30 Operands:[[120]]} {Opcode:33 Operands:[[104 105]]} {Opcode:5 Operands:[]} {Opcode:6 Operands:[]} {Opcode:33 Operands:[[104 105 105 105 105 105]]} {Opcode:9 Operands:[]} {Opcode:7 Operands:[]} {Opcode:33 Operands:[[119 111 114 108 100]]} {Opcode:9 Operands:[]} {Opcode:8 Operands:[]}] symbolTable:map[]}
Executing Instruction: Opcode 33, Operands [[104 105]]
Stack after PUSH_STRING: [hi]
Executing Instruction: Opcode 44, Operands [[120]]
Variable x defined with value: hi
Executing Instruction: Opcode 30, Operands [[120]]
Stack after PUSH_VARIABLE (x): [hi]
Executing Instruction: Opcode 33, Operands [[104 105]]
Stack after PUSH_STRING: [hi hi]
Executing Instruction: Opcode 5, Operands []
Stack after NEQ: [false]
Executing Instruction: Opcode 6, Operands []
Executing Instruction: Opcode 33, Operands [[119 111 114 108 100]]
Stack after PUSH_STRING: [world]
Executing Instruction: Opcode 9, Operands []
world
Executing Instruction: Opcode 8, Operands []
Final VM State:
&{stack:[] pc:12 code:[{Opcode:33 Operands:[[104 105]]} {Opcode:44 Operands:[[120]]} {Opcode:30 Operands:[[120]]} {Opcode:33 Operands:[[104 105]]} {Opcode:5 Operands:[]} {Opcode:6 Operands:[]} {Opcode:33 Operands:[[104 105 105 105 105 105]]} {Opcode:9 Operands:[]} {Opcode:7 Operands:[]} {Opcode:33 Operands:[[119 111 114 108 100]]} {Opcode:9 Operands:[]} {Opcode:8 Operands:[]}] symbolTable:map[x:hi]}
