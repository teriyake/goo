[]interface {}{[]interface {}{parser.Identifier{Value:"def"}, parser.Identifier{Value:"x"}, parser.Number{Value:2}}, parser.IfStatement{Condition:[]interface {}{parser.Operator{Value:">"}, parser.Identifier{Value:"x"}, parser.Number{Value:10}}, ThenBlock:[]interface {}{[]interface {}{parser.Identifier{Value:"print"}, parser.Number{Value:2}}}, ElseBlock:interface {}(nil)}}
floating-point number:2
converted bytes:[0 0 0 0 0 0 0 64]
floating-point number:10
converted bytes:[0 0 0 0 0 0 36 64]
floating-point number:2
converted bytes:[0 0 0 0 0 0 0 64]
Generated Bytecode Instructions: [{18 [[0 0 0 0 0 0 0 64]]} {30 [x]} {17 [x]} {18 [[0 0 0 0 0 0 36 64]]} {2 []} {3 []} {18 [[0 0 0 0 0 0 0 64]]} {6 []} {4 []} {5 []}]
Initial VM State:
&{stack:[] pc:0 code:[{Opcode:18 Operands:[[0 0 0 0 0 0 0 64]]} {Opcode:30 Operands:[x]} {Opcode:17 Operands:[x]} {Opcode:18 Operands:[[0 0 0 0 0 0 36 64]]} {Opcode:2 Operands:[]} {Opcode:3 Operands:[]} {Opcode:18 Operands:[[0 0 0 0 0 0 0 64]]} {Opcode:6 Operands:[]} {Opcode:4 Operands:[]} {Opcode:5 Operands:[]}] symbolTable:map[]}
Executing Instruction: Opcode 18, Operands [[0 0 0 0 0 0 0 64]]
Stack after PUSH_NUMBER: [2]
Executing Instruction: Opcode 30, Operands [x]
Variable x defined with value: 2
Executing Instruction: Opcode 17, Operands [x]
Stack after PUSH_VARIABLE (x): [2]
Executing Instruction: Opcode 18, Operands [[0 0 0 0 0 0 36 64]]
Stack after PUSH_NUMBER: [2 10]
Executing Instruction: Opcode 2, Operands []
Stack after GRT: [false]
Executing Instruction: Opcode 3, Operands []
Executing Instruction: Opcode 4, Operands []
Executing Instruction: Opcode 5, Operands []
Final VM State:
&{stack:[] pc:10 code:[{Opcode:18 Operands:[[0 0 0 0 0 0 0 64]]} {Opcode:30 Operands:[x]} {Opcode:17 Operands:[x]} {Opcode:18 Operands:[[0 0 0 0 0 0 36 64]]} {Opcode:2 Operands:[]} {Opcode:3 Operands:[]} {Opcode:18 Operands:[[0 0 0 0 0 0 0 64]]} {Opcode:6 Operands:[]} {Opcode:4 Operands:[]} {Opcode:5 Operands:[]}] symbolTable:map[x:2]}
