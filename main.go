package main

import (
	"fmt"
	"teriyake/goo/lexer"
	"teriyake/goo/parser"
	"teriyake/goo/compiler"
	"teriyake/goo/vm"
)

func main() {
	//gooCode := "(let x -2) (if (< x 3) (if (> x 1) (print 'x is greater than 1 and less than 3')) else (if (= x -2) (print 'x equals -2') else (print 'x is greater than 3')))"
	gooCode := "(def hello (n) (print n))"
	//gooCode := "(let x 10) (let x 11)"
	fmt.Printf("Input: %v\n", gooCode)
	lexer := lexer.NewLexer(gooCode)
	par := parser.NewParser(lexer)
	ast, err := par.Parse()
	if err != nil {
		fmt.Printf("Error: %s\n", err)
	} else {
		fmt.Printf("AST: %#v\n", ast)
	}
	comp := compiler.NewCompiler()
	bytecodeInstructions, err := comp.CompileAST(ast)
	if err != nil {
		fmt.Printf("Error compiling AST: %s\n", err)
		return
	}
	//fmt.Printf("Generated Bytecode: %v\n", bytecode)
	fmt.Printf("Generated Bytecode Instructions: %v\n", bytecodeInstructions)

	virtualMachine := vm.NewVM(bytecodeInstructions)
	fmt.Printf("Initial VM State:\n%+v\n", virtualMachine)

	err = virtualMachine.Run()
	if err != nil {
		fmt.Printf("Error executing Goo code: %s\n", err)
	}
	fmt.Printf("Final VM State:\n%+v\n", virtualMachine)
}
